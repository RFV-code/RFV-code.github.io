{
    "docs": [
        {
            "location": "/about/", 
            "text": "About me (again)\n\n\nI'm a person who undestands that not many people actually understand the financial system.", 
            "title": "About"
        }, 
        {
            "location": "/about/#about-me-again", 
            "text": "I'm a person who undestands that not many people actually understand the financial system.", 
            "title": "About me (again)"
        }, 
        {
            "location": "/blog/0161001/", 
            "text": "Time to share\n\n\n2016/10/01\n\n\nSo as I was doing a Google search today in relation to my programming work. I realized that it's time for a blog site. With so much information in my head as well as opinions about computation, computers, and programming in general, its time that I share that knowledge to others.\n\n\nGit mass rename\n\n\n2016/10/01\n\n\nI was doing some searching today to find out how I can rename files without using the Git utility. The reason was that I was given about 3,000 files which all needed to be mass renamed with. I am using an excellent utility on Windows called \nAdvanced Renamer\n, which allows me to do Regex search and replace on file names.\n\n\nSo the only option would have been to just do the renaming on files in the repo and then just add them again afterwards. So after doing this what I noticed was that the repo folder wasn't actually significantly larger, as these files where large all together.\n\n\nGit stores file information with an object-ID, which is unique for whatever data is in a file. If one moves a file and then adds that file again to be tracked by git (in the new folder) then git will be smart enough to detect that its the same file. However if we do a commit before adding the moved file to be tracked, then git will 1st remove the files old location and then it wont detect the change. So here is how you would do it with the git command line:\n\n\nmkdir lib\nmv hello.html lib\ngit add lib/hello.html\ngit rm hello.html\n\n\n\n\nCompiler feature turnoff\n\n\n2016/10/01\n\n\nI have often been thinking why programming is so, well, un-intuitive. Why is it so hard? People who know little about programming and new programmers ofter believe that you simply somehow tell the computer what it needs to be doing and it will figure it out by itself. Like \n\n\nProgramming is the art of using other peoples work. We use processors which have been designed by very cleaver people, mass produced so that we can afford to buy some, by the people who write code and then share it. The reason its so hard it because of the sheer amount of code, data and hence inherent complexity that goes with that. Any additional feature has the potential to add exponential complexity to any domain.\n\n\nAnyways, regarding dynamic typing: is there no way to turn this feature of for certain sections of code. Take as an example cython. Cython is code with python syntax (mostly) but compiles to static native c code. Why does the python language in conjunction with the python compiler not just enable all code to turn on/off dynamic typing for certain parts of the abstract syntax tree. In fact why can't we design a language which does the same for all modern programming language features including, garbage collection, exception handling. Why cant you prototype your programs and when your ready selective turn off features while maintaining most of your existing code in a single clean syntax? \n\n\nBy looking at the python compiler it is clear that something like this would not even be considered as the mantra in that community is to keep the compiler as easy to understand as possible even at the cost of speed. Its so obvious that the compiler sometimes adds dead byte code at the end of functions simply because no-one is bothered to add complexity to the compiler. The objective in python is not speed, and I think that is very sad. I believe that \nnative\n is and will always be very relevant, and enabling programmer to learn one language which can deal with native as well as features will be extremely helpful.", 
            "title": "Time to share"
        }, 
        {
            "location": "/blog/0161001/#time-to-share", 
            "text": "2016/10/01  So as I was doing a Google search today in relation to my programming work. I realized that it's time for a blog site. With so much information in my head as well as opinions about computation, computers, and programming in general, its time that I share that knowledge to others.", 
            "title": "Time to share"
        }, 
        {
            "location": "/blog/0161001/#git-mass-rename", 
            "text": "2016/10/01  I was doing some searching today to find out how I can rename files without using the Git utility. The reason was that I was given about 3,000 files which all needed to be mass renamed with. I am using an excellent utility on Windows called  Advanced Renamer , which allows me to do Regex search and replace on file names.  So the only option would have been to just do the renaming on files in the repo and then just add them again afterwards. So after doing this what I noticed was that the repo folder wasn't actually significantly larger, as these files where large all together.  Git stores file information with an object-ID, which is unique for whatever data is in a file. If one moves a file and then adds that file again to be tracked by git (in the new folder) then git will be smart enough to detect that its the same file. However if we do a commit before adding the moved file to be tracked, then git will 1st remove the files old location and then it wont detect the change. So here is how you would do it with the git command line:  mkdir lib\nmv hello.html lib\ngit add lib/hello.html\ngit rm hello.html", 
            "title": "Git mass rename"
        }, 
        {
            "location": "/blog/0161001/#compiler-feature-turnoff", 
            "text": "2016/10/01  I have often been thinking why programming is so, well, un-intuitive. Why is it so hard? People who know little about programming and new programmers ofter believe that you simply somehow tell the computer what it needs to be doing and it will figure it out by itself. Like   Programming is the art of using other peoples work. We use processors which have been designed by very cleaver people, mass produced so that we can afford to buy some, by the people who write code and then share it. The reason its so hard it because of the sheer amount of code, data and hence inherent complexity that goes with that. Any additional feature has the potential to add exponential complexity to any domain.  Anyways, regarding dynamic typing: is there no way to turn this feature of for certain sections of code. Take as an example cython. Cython is code with python syntax (mostly) but compiles to static native c code. Why does the python language in conjunction with the python compiler not just enable all code to turn on/off dynamic typing for certain parts of the abstract syntax tree. In fact why can't we design a language which does the same for all modern programming language features including, garbage collection, exception handling. Why cant you prototype your programs and when your ready selective turn off features while maintaining most of your existing code in a single clean syntax?   By looking at the python compiler it is clear that something like this would not even be considered as the mantra in that community is to keep the compiler as easy to understand as possible even at the cost of speed. Its so obvious that the compiler sometimes adds dead byte code at the end of functions simply because no-one is bothered to add complexity to the compiler. The objective in python is not speed, and I think that is very sad. I believe that  native  is and will always be very relevant, and enabling programmer to learn one language which can deal with native as well as features will be extremely helpful.", 
            "title": "Compiler feature turnoff"
        }
    ]
}